{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aiden\\\\Desktop\\\\weatherapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [city, setCity] = useState('');\n  const [country, setCountry] = useState('');\n  const [stateCode, setStateCode] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [locationData, setLocationData] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const apiKey = '1a67ab44359d61742560aa00d59baf0b';\n  const countries = [{\n    code: 'CA',\n    name: 'Canada'\n  }, {\n    code: 'US',\n    name: 'United States'\n  }, {\n    code: 'AF',\n    name: 'Afghanistan'\n  }, {\n    code: 'AX',\n    name: 'Åland Islands'\n  }, {\n    code: 'AL',\n    name: 'Albania'\n  }, {\n    code: 'DZ',\n    name: 'Algeria'\n  }, {\n    code: 'AS',\n    name: 'American Samoa'\n  }, {\n    code: 'AD',\n    name: 'Andorra'\n  }, {\n    code: 'AO',\n    name: 'Angola'\n  }, {\n    code: 'AI',\n    name: 'Anguilla'\n  }, {\n    code: 'AQ',\n    name: 'Antarctica'\n  }, {\n    code: 'AG',\n    name: 'Antigua and Barbuda'\n  }, {\n    code: 'AR',\n    name: 'Argentina'\n  }, {\n    code: 'AM',\n    name: 'Armenia'\n  }, {\n    code: 'AW',\n    name: 'Aruba'\n  }, {\n    code: 'AU',\n    name: 'Australia'\n  }, {\n    code: 'AT',\n    name: 'Austria'\n  }, {\n    code: 'AZ',\n    name: 'Azerbaijan'\n  }, {\n    code: 'BS',\n    name: 'Bahamas'\n  }, {\n    code: 'BH',\n    name: 'Bahrain'\n  }, {\n    code: 'BD',\n    name: 'Bangladesh'\n  }, {\n    code: 'BB',\n    name: 'Barbados'\n  }, {\n    code: 'BY',\n    name: 'Belarus'\n  }, {\n    code: 'BE',\n    name: 'Belgium'\n  }, {\n    code: 'BZ',\n    name: 'Belize'\n  }, {\n    code: 'BJ',\n    name: 'Benin'\n  }, {\n    code: 'BM',\n    name: 'Bermuda'\n  }, {\n    code: 'BT',\n    name: 'Bhutan'\n  }, {\n    code: 'BO',\n    name: 'Bolivia'\n  }, {\n    code: 'BQ',\n    name: 'Bonaire, Sint Eustatius and Saba'\n  }, {\n    code: 'BA',\n    name: 'Bosnia and Herzegovina'\n  }, {\n    code: 'BW',\n    name: 'Botswana'\n  }, {\n    code: 'BV',\n    name: 'Bouvet Island'\n  }, {\n    code: 'BR',\n    name: 'Brazil'\n  }, {\n    code: 'IO',\n    name: 'British Indian Ocean Territory'\n  }, {\n    code: 'BN',\n    name: 'Brunei Darussalam'\n  }, {\n    code: 'BG',\n    name: 'Bulgaria'\n  }, {\n    code: 'BF',\n    name: 'Burkina Faso'\n  }, {\n    code: 'BI',\n    name: 'Burundi'\n  }, {\n    code: 'KH',\n    name: 'Cambodia'\n  }, {\n    code: 'CM',\n    name: 'Cameroon'\n  }, {\n    code: 'CA',\n    name: 'Canada'\n  }, {\n    code: 'CV',\n    name: 'Cape Verde'\n  }, {\n    code: 'KY',\n    name: 'Cayman Islands'\n  }, {\n    code: 'CF',\n    name: 'Central African Republic'\n  }, {\n    code: 'TD',\n    name: 'Chad'\n  }, {\n    code: 'CL',\n    name: 'Chile'\n  }, {\n    code: 'CN',\n    name: 'China'\n  }, {\n    code: 'CX',\n    name: 'Christmas Island'\n  }, {\n    code: 'CC',\n    name: 'Cocos (Keeling) Islands'\n  }, {\n    code: 'CO',\n    name: 'Colombia'\n  }, {\n    code: 'KM',\n    name: 'Comoros'\n  }, {\n    code: 'CG',\n    name: 'Congo'\n  }, {\n    code: 'CD',\n    name: 'Congo, Democratic Republic of the'\n  }, {\n    code: 'CK',\n    name: 'Cook Islands'\n  }, {\n    code: 'CR',\n    name: 'Costa Rica'\n  }, {\n    code: 'HR',\n    name: 'Croatia'\n  }, {\n    code: 'CU',\n    name: 'Cuba'\n  }, {\n    code: 'CY',\n    name: 'Cyprus'\n  }, {\n    code: 'CZ',\n    name: 'Czech Republic'\n  }, {\n    code: 'DK',\n    name: 'Denmark'\n  }, {\n    code: 'DJ',\n    name: 'Djibouti'\n  }, {\n    code: 'DM',\n    name: 'Dominica'\n  }, {\n    code: 'DO',\n    name: 'Dominican Republic'\n  }, {\n    code: 'EC',\n    name: 'Ecuador'\n  }, {\n    code: 'EG',\n    name: 'Egypt'\n  }, {\n    code: 'SV',\n    name: 'El Salvador'\n  }, {\n    code: 'GQ',\n    name: 'Equatorial Guinea'\n  }, {\n    code: 'ER',\n    name: 'Eritrea'\n  }, {\n    code: 'EE',\n    name: 'Estonia'\n  }, {\n    code: 'ET',\n    name: 'Ethiopia'\n  }, {\n    code: 'FK',\n    name: 'Falkland Islands (Malvinas)'\n  }, {\n    code: 'FO',\n    name: 'Faroe Islands'\n  }, {\n    code: 'FJ',\n    name: 'Fiji'\n  }, {\n    code: 'FI',\n    name: 'Finland'\n  }, {\n    code: 'FR',\n    name: 'France'\n  }, {\n    code: 'GF',\n    name: 'French Guiana'\n  }, {\n    code: 'PF',\n    name: 'French Polynesia'\n  }, {\n    code: 'TF',\n    name: 'French Southern Territories'\n  }, {\n    code: 'GA',\n    name: 'Gabon'\n  }, {\n    code: 'GM',\n    name: 'Gambia'\n  }, {\n    code: 'GE',\n    name: 'Georgia'\n  }, {\n    code: 'DE',\n    name: 'Germany'\n  }, {\n    code: 'GH',\n    name: 'Ghana'\n  }, {\n    code: 'GI',\n    name: 'Gibraltar'\n  }, {\n    code: 'GR',\n    name: 'Greece'\n  }, {\n    code: 'GL',\n    name: 'Greenland'\n  }, {\n    code: 'GD',\n    name: 'Grenada'\n  }, {\n    code: 'GP',\n    name: 'Guadeloupe'\n  }, {\n    code: 'GU',\n    name: 'Guam'\n  }, {\n    code: 'GT',\n    name: 'Guatemala'\n  }, {\n    code: 'GG',\n    name: 'Guernsey'\n  }, {\n    code: 'GN',\n    name: 'Guinea'\n  }, {\n    code: 'GW',\n    name: 'Guinea-Bissau'\n  }, {\n    code: 'GY',\n    name: 'Guyana'\n  }, {\n    code: 'HT',\n    name: 'Haiti'\n  }, {\n    code: 'HM',\n    name: 'Heard Island and McDonald Islands'\n  }, {\n    code: 'VA',\n    name: 'Holy See (Vatican City State)'\n  }, {\n    code: 'HN',\n    name: 'Honduras'\n  }, {\n    code: 'HK',\n    name: 'Hong Kong'\n  }, {\n    code: 'HU',\n    name: 'Hungary'\n  }, {\n    code: 'IS',\n    name: 'Iceland'\n  }, {\n    code: 'IN',\n    name: 'India'\n  }, {\n    code: 'ID',\n    name: 'Indonesia'\n  }, {\n    code: 'IR',\n    name: 'Iran, Islamic Republic of'\n  }, {\n    code: 'IQ',\n    name: 'Iraq'\n  }, {\n    code: 'IE',\n    name: 'Ireland'\n  }, {\n    code: 'IM',\n    name: 'Isle of Man'\n  }, {\n    code: 'IL',\n    name: 'Israel'\n  }, {\n    code: 'IT',\n    name: 'Italy'\n  }, {\n    code: 'JM',\n    name: 'Jamaica'\n  }, {\n    code: 'JP',\n    name: 'Japan'\n  }, {\n    code: 'JE',\n    name: 'Jersey'\n  }, {\n    code: 'JO',\n    name: 'Jordan'\n  }, {\n    code: 'KZ',\n    name: 'Kazakhstan'\n  }, {\n    code: 'KE',\n    name: 'Kenya'\n  }, {\n    code: 'KI',\n    name: 'Kiribati'\n  }, {\n    code: 'KP',\n    name: 'Korea, Democratic People\\'s Republic of'\n  }, {\n    code: 'KR',\n    name: 'Korea, Republic of'\n  }, {\n    code: 'KW',\n    name: 'Kuwait'\n  }, {\n    code: 'KG',\n    name: 'Kyrgyzstan'\n  }, {\n    code: 'LA',\n    name: 'Lao People\\'s Democratic Republic'\n  }, {\n    code: 'LV',\n    name: 'Latvia'\n  }, {\n    code: 'LB',\n    name: 'Lebanon'\n  }, {\n    code: 'LS',\n    name: 'Lesotho'\n  }, {\n    code: 'LR',\n    name: 'Liberia'\n  }, {\n    code: 'LY',\n    name: 'Libya'\n  }, {\n    code: 'LI',\n    name: 'Liechtenstein'\n  }, {\n    code: 'LT',\n    name: 'Lithuania'\n  }, {\n    code: 'LU',\n    name: 'Luxembourg'\n  }, {\n    code: 'MO',\n    name: 'Macao'\n  }, {\n    code: 'MK',\n    name: 'Macedonia, the Former Yugoslav Republic of'\n  }, {\n    code: 'MG',\n    name: 'Madagascar'\n  }, {\n    code: 'MW',\n    name: 'Malawi'\n  }, {\n    code: 'MY',\n    name: 'Malaysia'\n  }, {\n    code: 'MV',\n    name: 'Maldives'\n  }, {\n    code: 'ML',\n    name: 'Mali'\n  }, {\n    code: 'MT',\n    name: 'Malta'\n  }, {\n    code: 'MH',\n    name: 'Marshall Islands'\n  }, {\n    code: 'MQ',\n    name: 'Martinique'\n  }, {\n    code: 'MR',\n    name: 'Mauritania'\n  }, {\n    code: 'MU',\n    name: 'Mauritius'\n  }, {\n    code: 'YT',\n    name: 'Mayotte'\n  }, {\n    code: 'MX',\n    name: 'Mexico'\n  }, {\n    code: 'FM',\n    name: 'Micronesia, Federated States of'\n  }, {\n    code: 'MD',\n    name: 'Moldova, Republic of'\n  }, {\n    code: 'MC',\n    name: 'Monaco'\n  }, {\n    code: 'MN',\n    name: 'Mongolia'\n  }, {\n    code: 'ME',\n    name: 'Montenegro'\n  }, {\n    code: 'MS',\n    name: 'Montserrat'\n  }, {\n    code: 'MA',\n    name: 'Morocco'\n  }, {\n    code: 'MZ',\n    name: 'Mozambique'\n  }, {\n    code: 'MM',\n    name: 'Myanmar'\n  }, {\n    code: 'NA',\n    name: 'Namibia'\n  }, {\n    code: 'NR',\n    name: 'Nauru'\n  }, {\n    code: 'NP',\n    name: 'Nepal'\n  }, {\n    code: 'NL',\n    name: 'Netherlands'\n  }, {\n    code: 'NC',\n    name: 'New Caledonia'\n  }, {\n    code: 'NZ',\n    name: 'New Zealand'\n  }, {\n    code: 'NI',\n    name: 'Nicaragua'\n  }, {\n    code: 'NE',\n    name: 'Niger'\n  }, {\n    code: 'NG',\n    name: 'Nigeria'\n  }, {\n    code: 'NU',\n    name: 'Niue'\n  }, {\n    code: 'NF',\n    name: 'Norfolk Island'\n  }, {\n    code: 'MP',\n    name: 'Northern Mariana Islands'\n  }, {\n    code: 'NO',\n    name: 'Norway'\n  }, {\n    code: 'OM',\n    name: 'Oman'\n  }, {\n    code: 'PK',\n    name: 'Pakistan'\n  }, {\n    code: 'PW',\n    name: 'Palau'\n  }, {\n    code: 'PS',\n    name: 'Palestine, State of'\n  }, {\n    code: 'PA',\n    name: 'Panama'\n  }, {\n    code: 'PG',\n    name: 'Papua New Guinea'\n  }, {\n    code: 'PY',\n    name: 'Paraguay'\n  }, {\n    code: 'PE',\n    name: 'Peru'\n  }, {\n    code: 'PH',\n    name: 'Philippines'\n  }, {\n    code: 'PN',\n    name: 'Pitcairn'\n  }, {\n    code: 'PL',\n    name: 'Poland'\n  }, {\n    code: 'PT',\n    name: 'Portugal'\n  }, {\n    code: 'PR',\n    name: 'Puerto Rico'\n  }, {\n    code: 'QA',\n    name: 'Qatar'\n  }, {\n    code: 'RE',\n    name: 'Réunion'\n  }, {\n    code: 'RO',\n    name: 'Romania'\n  }, {\n    code: 'RU',\n    name: 'Russian Federation'\n  }, {\n    code: 'RW',\n    name: 'Rwanda'\n  }, {\n    code: 'BL',\n    name: 'Saint Barthélemy'\n  }, {\n    code: 'SH',\n    name: 'Saint Helena, Ascension and Tristan da Cunha'\n  }, {\n    code: 'KN',\n    name: 'Saint Kitts and Nevis'\n  }, {\n    code: 'LC',\n    name: 'Saint Lucia'\n  }, {\n    code: 'MF',\n    name: 'Saint Martin (French part)'\n  }, {\n    code: 'PM',\n    name: 'Saint Pierre and Miquelon'\n  }, {\n    code: 'VC',\n    name: 'Saint Vincent and the Grenadines'\n  }, {\n    code: 'WS',\n    name: 'Samoa'\n  }, {\n    code: 'SM',\n    name: 'San Marino'\n  }, {\n    code: 'ST',\n    name: 'Sao Tome and Principe'\n  }, {\n    code: 'SA',\n    name: 'Saudi Arabia'\n  }, {\n    code: 'SN',\n    name: 'Senegal'\n  }, {\n    code: 'RS',\n    name: 'Serbia'\n  }, {\n    code: 'SC',\n    name: 'Seychelles'\n  }, {\n    code: 'SL',\n    name: 'Sierra Leone'\n  }, {\n    code: 'SG',\n    name: 'Singapore'\n  }, {\n    code: 'SX',\n    name: 'Sint Maarten (Dutch part)'\n  }, {\n    code: 'SK',\n    name: 'Slovakia'\n  }, {\n    code: 'SI',\n    name: 'Slovenia'\n  }, {\n    code: 'SB',\n    name: 'Solomon Islands'\n  }, {\n    code: 'SO',\n    name: 'Somalia'\n  }, {\n    code: 'ZA',\n    name: 'South Africa'\n  }, {\n    code: 'GS',\n    name: 'South Georgia and the South Sandwich Islands'\n  }, {\n    code: 'SS',\n    name: 'South Sudan'\n  }, {\n    code: 'ES',\n    name: 'Spain'\n  }, {\n    code: 'LK',\n    name: 'Sri Lanka'\n  }, {\n    code: 'SD',\n    name: 'Sudan'\n  }, {\n    code: 'SR',\n    name: 'Suriname'\n  }, {\n    code: 'SJ',\n    name: 'Svalbard and Jan Mayen'\n  }, {\n    code: 'SE',\n    name: 'Sweden'\n  }, {\n    code: 'CH',\n    name: 'Switzerland'\n  }, {\n    code: 'SY',\n    name: 'Syrian Arab Republic'\n  }, {\n    code: 'TW',\n    name: 'Taiwan, Province of China'\n  }, {\n    code: 'TJ',\n    name: 'Tajikistan'\n  }, {\n    code: 'TZ',\n    name: 'Tanzania, United Republic of'\n  }, {\n    code: 'TH',\n    name: 'Thailand'\n  }, {\n    code: 'TL',\n    name: 'Timor-Leste'\n  }, {\n    code: 'TG',\n    name: 'Togo'\n  }, {\n    code: 'TK',\n    name: 'Tokelau'\n  }, {\n    code: 'TO',\n    name: 'Tonga'\n  }, {\n    code: 'TT',\n    name: 'Trinidad and Tobago'\n  }, {\n    code: 'TN',\n    name: 'Tunisia'\n  }, {\n    code: 'TR',\n    name: 'Turkey'\n  }, {\n    code: 'TM',\n    name: 'Turkmenistan'\n  }, {\n    code: 'TC',\n    name: 'Turks and Caicos Islands'\n  }, {\n    code: 'TV',\n    name: 'Tuvalu'\n  }, {\n    code: 'UG',\n    name: 'Uganda'\n  }, {\n    code: 'UA',\n    name: 'Ukraine'\n  }, {\n    code: 'AE',\n    name: 'United Arab Emirates'\n  }, {\n    code: 'GB',\n    name: 'United Kingdom'\n  }, {\n    code: 'US',\n    name: 'United States'\n  }, {\n    code: 'UM',\n    name: 'United States Minor Outlying Islands'\n  }, {\n    code: 'UY',\n    name: 'Uruguay'\n  }, {\n    code: 'UZ',\n    name: 'Uzbekistan'\n  }, {\n    code: 'VU',\n    name: 'Vanuatu'\n  }, {\n    code: 'VE',\n    name: 'Venezuela, Bolivarian Republic of'\n  }, {\n    code: 'VN',\n    name: 'Viet Nam'\n  }, {\n    code: 'VG',\n    name: 'Virgin Islands, British'\n  }, {\n    code: 'VI',\n    name: 'Virgin Islands, U.S.'\n  }, {\n    code: 'WF',\n    name: 'Wallis and Futuna'\n  }, {\n    code: 'EH',\n    name: 'Western Sahara'\n  }, {\n    code: 'YE',\n    name: 'Yemen'\n  }, {\n    code: 'ZM',\n    name: 'Zambia'\n  }, {\n    code: 'ZW',\n    name: 'Zimbabwe'\n  }\n  // Add more countries as needed\n  ];\n  const usStates = [{\n    code: 'AL',\n    name: 'Alabama'\n  }, {\n    code: 'AK',\n    name: 'Alaska'\n  }, {\n    code: 'AZ',\n    name: 'Arizona'\n  }, {\n    code: 'AR',\n    name: 'Arkansas'\n  }, {\n    code: 'CA',\n    name: 'California'\n  }, {\n    code: 'CO',\n    name: 'Colorado'\n  }, {\n    code: 'CT',\n    name: 'Connecticut'\n  }, {\n    code: 'DE',\n    name: 'Delaware'\n  }, {\n    code: 'FL',\n    name: 'Florida'\n  }, {\n    code: 'GA',\n    name: 'Georgia'\n  }, {\n    code: 'HI',\n    name: 'Hawaii'\n  }, {\n    code: 'ID',\n    name: 'Idaho'\n  }, {\n    code: 'IL',\n    name: 'Illinois'\n  }, {\n    code: 'IN',\n    name: 'Indiana'\n  }, {\n    code: 'IA',\n    name: 'Iowa'\n  }, {\n    code: 'KS',\n    name: 'Kansas'\n  }, {\n    code: 'KY',\n    name: 'Kentucky'\n  }, {\n    code: 'LA',\n    name: 'Louisiana'\n  }, {\n    code: 'ME',\n    name: 'Maine'\n  }, {\n    code: 'MD',\n    name: 'Maryland'\n  }, {\n    code: 'MA',\n    name: 'Massachusetts'\n  }, {\n    code: 'MI',\n    name: 'Michigan'\n  }, {\n    code: 'MN',\n    name: 'Minnesota'\n  }, {\n    code: 'MS',\n    name: 'Mississippi'\n  }, {\n    code: 'MO',\n    name: 'Missouri'\n  }, {\n    code: 'MT',\n    name: 'Montana'\n  }, {\n    code: 'NE',\n    name: 'Nebraska'\n  }, {\n    code: 'NV',\n    name: 'Nevada'\n  }, {\n    code: 'NH',\n    name: 'New Hampshire'\n  }, {\n    code: 'NJ',\n    name: 'New Jersey'\n  }, {\n    code: 'NM',\n    name: 'New Mexico'\n  }, {\n    code: 'NY',\n    name: 'New York'\n  }, {\n    code: 'NC',\n    name: 'North Carolina'\n  }, {\n    code: 'ND',\n    name: 'North Dakota'\n  }, {\n    code: 'OH',\n    name: 'Ohio'\n  }, {\n    code: 'OK',\n    name: 'Oklahoma'\n  }, {\n    code: 'OR',\n    name: 'Oregon'\n  }, {\n    code: 'PA',\n    name: 'Pennsylvania'\n  }, {\n    code: 'RI',\n    name: 'Rhode Island'\n  }, {\n    code: 'SC',\n    name: 'South Carolina'\n  }, {\n    code: 'SD',\n    name: 'South Dakota'\n  }, {\n    code: 'TN',\n    name: 'Tennessee'\n  }, {\n    code: 'TX',\n    name: 'Texas'\n  }, {\n    code: 'UT',\n    name: 'Utah'\n  }, {\n    code: 'VT',\n    name: 'Vermont'\n  }, {\n    code: 'VA',\n    name: 'Virginia'\n  }, {\n    code: 'WA',\n    name: 'Washington'\n  }, {\n    code: 'WV',\n    name: 'West Virginia'\n  }, {\n    code: 'WI',\n    name: 'Wisconsin'\n  }, {\n    code: 'WY',\n    name: 'Wyoming'\n  }];\n  const getWeatherData = async () => {\n    try {\n      // The GeoSpatial API needs only a city and country unless the country is the United States. In that case the url also needs the state code\n      const locationApiUrl = country === 'US' ? `http://api.openweathermap.org/geo/1.0/direct?q=${city},${stateCode},${country}&limit=1&appid=${apiKey}` : `http://api.openweathermap.org/geo/1.0/direct?q=${city},${country}&limit=1&appid=${apiKey}`;\n      const locationResponse = await fetch(locationApiUrl);\n      const locationData = await locationResponse.json();\n\n      // If the GeoSpatial API cannot find the searched place, an error message appears\n      if (!locationData || locationData.length === 0) {\n        setErrorMessage('Location not found. Please check the entered place and try again.');\n        setWeatherData(null); // Reset weatherData\n        setLocationData(null); // Reset locationData\n        return;\n      }\n      setLocationData(locationData);\n\n      // Update the Weather API url based off of the found latitude and longitude\n      const weatherApiUrl = `https://api.openweathermap.org/data/3.0/onecall?lat=${locationData && locationData.length > 0 ? locationData[0].lat : ''}&lon=${locationData && locationData.length > 0 ? locationData[0].lon : ''}&appid=${apiKey}`;\n      const weatherResponse = await fetch(weatherApiUrl);\n      const weatherData = await weatherResponse.json();\n      setWeatherData(weatherData);\n      // Resets the error message if a place is found and the weather is retrieved\n      setErrorMessage('');\n    } catch (error) {\n      console.error('Error fetching data:', error);\n\n      // Check if the error is due to a specific condition (e.g., place not found)\n      if (error.message.includes('undefined')) {\n        // Handle the specific error condition\n        alert('Location not found. Please ensure your input is correct and try again.');\n      } else {\n        // For other types of errors, provide a generic error message\n        alert('An error occurred while fetching location data. Please try again later.');\n      }\n    }\n  };\n  const handleCountryChange = e => {\n    const selectedCountry = e.target.value;\n    setCountry(selectedCountry);\n\n    // If the selected country is the United States, set an empty state code\n    if (selectedCountry === 'US') {\n      setStateCode('');\n    }\n  };\n  const handleStateChange = e => {\n    const selectedStateCode = e.target.value;\n    setStateCode(selectedStateCode);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    getWeatherData();\n  };\n\n  // The Weather API gets temperature in kelvin, not a unit most people would use when checking the weather\n  const kelvinToCelsius = kelvin => kelvin - 273.15;\n\n  // Formats the date used in the forecast\n  const formatDate = date => {\n    const options = {\n      month: 'long',\n      day: 'numeric'\n    };\n    return new Intl.DateTimeFormat('en-US', options).format(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter city name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: city,\n          onChange: e => setCity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select country:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: country,\n          onChange: handleCountryChange,\n          children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: country.code,\n            children: country.name\n          }, country.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this), country === 'US' && /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select state:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: stateCode,\n          onChange: handleStateChange,\n          children: usStates.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: state.code,\n            children: state.name\n          }, state.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 17\n    }, this), weatherData && weatherData.current && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", kelvinToCelsius(weatherData.current.temp).toFixed(2), \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Feels Like: \", kelvinToCelsius(weatherData.current.feels_like).toFixed(2), \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", weatherData.current.humidity ? `${weatherData.current.humidity}%` : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://openweathermap.org/img/w/${weatherData.current.weather[0].icon}.png`,\n        alt: weatherData.current.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 17\n    }, this), weatherData && weatherData.daily && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"7-Day Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-container\",\n        children: weatherData.daily.slice(1).map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-day\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"date\",\n            children: formatDate(new Date(day.dt * 1000))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"temperature\",\n            children: [kelvinToCelsius(day.temp.day).toFixed(2), \" \\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://openweathermap.org/img/w/${day.weather[0].icon}.png`,\n            alt: day.weather[0].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 17\n    }, this), locationData && locationData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Location Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latitude: \", locationData[0].lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Longitude: \", locationData[0].lon]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"2KJ/TICgPMoGzvI7YbiUWab+zn8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","city","setCity","country","setCountry","stateCode","setStateCode","weatherData","setWeatherData","locationData","setLocationData","errorMessage","setErrorMessage","apiKey","countries","code","name","usStates","getWeatherData","locationApiUrl","locationResponse","fetch","json","length","weatherApiUrl","lat","lon","weatherResponse","error","console","message","includes","alert","handleCountryChange","e","selectedCountry","target","value","handleStateChange","selectedStateCode","handleSubmit","preventDefault","kelvinToCelsius","kelvin","formatDate","date","options","month","day","Intl","DateTimeFormat","format","className","children","onSubmit","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","state","style","color","current","temp","toFixed","feels_like","humidity","src","weather","icon","alt","description","daily","slice","index","Date","dt","_c","$RefreshReg$"],"sources":["C:/Users/Aiden/Desktop/weatherapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [city, setCity] = useState('');\r\n    const [country, setCountry] = useState('');\r\n    const [stateCode, setStateCode] = useState('');\r\n    const [weatherData, setWeatherData] = useState(null);\r\n    const [locationData, setLocationData] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const apiKey = '1a67ab44359d61742560aa00d59baf0b';\r\n\r\n    const countries = [\r\n        { code: 'CA', name: 'Canada' },\r\n        { code: 'US', name: 'United States' },\r\n        { code: 'AF', name: 'Afghanistan' },\r\n        { code: 'AX', name: 'Åland Islands' },\r\n        { code: 'AL', name: 'Albania' },\r\n        { code: 'DZ', name: 'Algeria' },\r\n        { code: 'AS', name: 'American Samoa' },\r\n        { code: 'AD', name: 'Andorra' },\r\n        { code: 'AO', name: 'Angola' },\r\n        { code: 'AI', name: 'Anguilla' },\r\n        { code: 'AQ', name: 'Antarctica' },\r\n        { code: 'AG', name: 'Antigua and Barbuda' },\r\n        { code: 'AR', name: 'Argentina' },\r\n        { code: 'AM', name: 'Armenia' },\r\n        { code: 'AW', name: 'Aruba' },\r\n        { code: 'AU', name: 'Australia' },\r\n        { code: 'AT', name: 'Austria' },\r\n        { code: 'AZ', name: 'Azerbaijan' },\r\n        { code: 'BS', name: 'Bahamas' },\r\n        { code: 'BH', name: 'Bahrain' },\r\n        { code: 'BD', name: 'Bangladesh' },\r\n        { code: 'BB', name: 'Barbados' },\r\n        { code: 'BY', name: 'Belarus' },\r\n        { code: 'BE', name: 'Belgium' },\r\n        { code: 'BZ', name: 'Belize' },\r\n        { code: 'BJ', name: 'Benin' },\r\n        { code: 'BM', name: 'Bermuda' },\r\n        { code: 'BT', name: 'Bhutan' },\r\n        { code: 'BO', name: 'Bolivia' },\r\n        { code: 'BQ', name: 'Bonaire, Sint Eustatius and Saba' },\r\n        { code: 'BA', name: 'Bosnia and Herzegovina' },\r\n        { code: 'BW', name: 'Botswana' },\r\n        { code: 'BV', name: 'Bouvet Island' },\r\n        { code: 'BR', name: 'Brazil' },\r\n        { code: 'IO', name: 'British Indian Ocean Territory' },\r\n        { code: 'BN', name: 'Brunei Darussalam' },\r\n        { code: 'BG', name: 'Bulgaria' },\r\n        { code: 'BF', name: 'Burkina Faso' },\r\n        { code: 'BI', name: 'Burundi' },\r\n        { code: 'KH', name: 'Cambodia' },\r\n        { code: 'CM', name: 'Cameroon' },\r\n        { code: 'CA', name: 'Canada' },\r\n        { code: 'CV', name: 'Cape Verde' },\r\n        { code: 'KY', name: 'Cayman Islands' },\r\n        { code: 'CF', name: 'Central African Republic' },\r\n        { code: 'TD', name: 'Chad' },\r\n        { code: 'CL', name: 'Chile' },\r\n        { code: 'CN', name: 'China' },\r\n        { code: 'CX', name: 'Christmas Island' },\r\n        { code: 'CC', name: 'Cocos (Keeling) Islands' },\r\n        { code: 'CO', name: 'Colombia' },\r\n        { code: 'KM', name: 'Comoros' },\r\n        { code: 'CG', name: 'Congo' },\r\n        { code: 'CD', name: 'Congo, Democratic Republic of the' },\r\n        { code: 'CK', name: 'Cook Islands' },\r\n        { code: 'CR', name: 'Costa Rica' },\r\n        { code: 'HR', name: 'Croatia' },\r\n        { code: 'CU', name: 'Cuba' },\r\n        { code: 'CY', name: 'Cyprus' },\r\n        { code: 'CZ', name: 'Czech Republic' },\r\n        { code: 'DK', name: 'Denmark' },\r\n        { code: 'DJ', name: 'Djibouti' },\r\n        { code: 'DM', name: 'Dominica' },\r\n        { code: 'DO', name: 'Dominican Republic' },\r\n        { code: 'EC', name: 'Ecuador' },\r\n        { code: 'EG', name: 'Egypt' },\r\n        { code: 'SV', name: 'El Salvador' },\r\n        { code: 'GQ', name: 'Equatorial Guinea' },\r\n        { code: 'ER', name: 'Eritrea' },\r\n        { code: 'EE', name: 'Estonia' },\r\n        { code: 'ET', name: 'Ethiopia' },\r\n        { code: 'FK', name: 'Falkland Islands (Malvinas)' },\r\n        { code: 'FO', name: 'Faroe Islands' },\r\n        { code: 'FJ', name: 'Fiji' },\r\n        { code: 'FI', name: 'Finland' },\r\n        { code: 'FR', name: 'France' },\r\n        { code: 'GF', name: 'French Guiana' },\r\n        { code: 'PF', name: 'French Polynesia' },\r\n        { code: 'TF', name: 'French Southern Territories' },\r\n        { code: 'GA', name: 'Gabon' },\r\n        { code: 'GM', name: 'Gambia' },\r\n        { code: 'GE', name: 'Georgia' },\r\n        { code: 'DE', name: 'Germany' },\r\n        { code: 'GH', name: 'Ghana' },\r\n        { code: 'GI', name: 'Gibraltar' },\r\n        { code: 'GR', name: 'Greece' },\r\n        { code: 'GL', name: 'Greenland' },\r\n        { code: 'GD', name: 'Grenada' },\r\n        { code: 'GP', name: 'Guadeloupe' },\r\n        { code: 'GU', name: 'Guam' },\r\n        { code: 'GT', name: 'Guatemala' },\r\n        { code: 'GG', name: 'Guernsey' },\r\n        { code: 'GN', name: 'Guinea' },\r\n        { code: 'GW', name: 'Guinea-Bissau' },\r\n        { code: 'GY', name: 'Guyana' },\r\n        { code: 'HT', name: 'Haiti' },\r\n        { code: 'HM', name: 'Heard Island and McDonald Islands' },\r\n        { code: 'VA', name: 'Holy See (Vatican City State)' },\r\n        { code: 'HN', name: 'Honduras' },\r\n        { code: 'HK', name: 'Hong Kong' },\r\n        { code: 'HU', name: 'Hungary' },\r\n        { code: 'IS', name: 'Iceland' },\r\n        { code: 'IN', name: 'India' },\r\n        { code: 'ID', name: 'Indonesia' },\r\n        { code: 'IR', name: 'Iran, Islamic Republic of' },\r\n        { code: 'IQ', name: 'Iraq' },\r\n        { code: 'IE', name: 'Ireland' },\r\n        { code: 'IM', name: 'Isle of Man' },\r\n        { code: 'IL', name: 'Israel' },\r\n        { code: 'IT', name: 'Italy' },\r\n        { code: 'JM', name: 'Jamaica' },\r\n        { code: 'JP', name: 'Japan' },\r\n        { code: 'JE', name: 'Jersey' },\r\n        { code: 'JO', name: 'Jordan' },\r\n        { code: 'KZ', name: 'Kazakhstan' },\r\n        { code: 'KE', name: 'Kenya' },\r\n        { code: 'KI', name: 'Kiribati' },\r\n        { code: 'KP', name: 'Korea, Democratic People\\'s Republic of' },\r\n        { code: 'KR', name: 'Korea, Republic of' },\r\n        { code: 'KW', name: 'Kuwait' },\r\n        { code: 'KG', name: 'Kyrgyzstan' },\r\n        { code: 'LA', name: 'Lao People\\'s Democratic Republic' },\r\n        { code: 'LV', name: 'Latvia' },\r\n        { code: 'LB', name: 'Lebanon' },\r\n        { code: 'LS', name: 'Lesotho' },\r\n        { code: 'LR', name: 'Liberia' },\r\n        { code: 'LY', name: 'Libya' },\r\n        { code: 'LI', name: 'Liechtenstein' },\r\n        { code: 'LT', name: 'Lithuania' },\r\n        { code: 'LU', name: 'Luxembourg' },\r\n        { code: 'MO', name: 'Macao' },\r\n        { code: 'MK', name: 'Macedonia, the Former Yugoslav Republic of' },\r\n        { code: 'MG', name: 'Madagascar' },\r\n        { code: 'MW', name: 'Malawi' },\r\n        { code: 'MY', name: 'Malaysia' },\r\n        { code: 'MV', name: 'Maldives' },\r\n        { code: 'ML', name: 'Mali' },\r\n        { code: 'MT', name: 'Malta' },\r\n        { code: 'MH', name: 'Marshall Islands' },\r\n        { code: 'MQ', name: 'Martinique' },\r\n        { code: 'MR', name: 'Mauritania' },\r\n        { code: 'MU', name: 'Mauritius' },\r\n        { code: 'YT', name: 'Mayotte' },\r\n        { code: 'MX', name: 'Mexico' },\r\n        { code: 'FM', name: 'Micronesia, Federated States of' },\r\n        { code: 'MD', name: 'Moldova, Republic of' },\r\n        { code: 'MC', name: 'Monaco' },\r\n        { code: 'MN', name: 'Mongolia' },\r\n        { code: 'ME', name: 'Montenegro' },\r\n        { code: 'MS', name: 'Montserrat' },\r\n        { code: 'MA', name: 'Morocco' },\r\n        { code: 'MZ', name: 'Mozambique' },\r\n        { code: 'MM', name: 'Myanmar' },\r\n        { code: 'NA', name: 'Namibia' },\r\n        { code: 'NR', name: 'Nauru' },\r\n        { code: 'NP', name: 'Nepal' },\r\n        { code: 'NL', name: 'Netherlands' },\r\n        { code: 'NC', name: 'New Caledonia' },\r\n        { code: 'NZ', name: 'New Zealand' },\r\n        { code: 'NI', name: 'Nicaragua' },\r\n        { code: 'NE', name: 'Niger' },\r\n        { code: 'NG', name: 'Nigeria' },\r\n        { code: 'NU', name: 'Niue' },\r\n        { code: 'NF', name: 'Norfolk Island' },\r\n        { code: 'MP', name: 'Northern Mariana Islands' },\r\n        { code: 'NO', name: 'Norway' },\r\n        { code: 'OM', name: 'Oman' },\r\n        { code: 'PK', name: 'Pakistan' },\r\n        { code: 'PW', name: 'Palau' },\r\n        { code: 'PS', name: 'Palestine, State of' },\r\n        { code: 'PA', name: 'Panama' },\r\n        { code: 'PG', name: 'Papua New Guinea' },\r\n        { code: 'PY', name: 'Paraguay' },\r\n        { code: 'PE', name: 'Peru' },\r\n        { code: 'PH', name: 'Philippines' },\r\n        { code: 'PN', name: 'Pitcairn' },\r\n        { code: 'PL', name: 'Poland' },\r\n        { code: 'PT', name: 'Portugal' },\r\n        { code: 'PR', name: 'Puerto Rico' },\r\n        { code: 'QA', name: 'Qatar' },\r\n        { code: 'RE', name: 'Réunion' },\r\n        { code: 'RO', name: 'Romania' },\r\n        { code: 'RU', name: 'Russian Federation' },\r\n        { code: 'RW', name: 'Rwanda' },\r\n        { code: 'BL', name: 'Saint Barthélemy' },\r\n        { code: 'SH', name: 'Saint Helena, Ascension and Tristan da Cunha' },\r\n        { code: 'KN', name: 'Saint Kitts and Nevis' },\r\n        { code: 'LC', name: 'Saint Lucia' },\r\n        { code: 'MF', name: 'Saint Martin (French part)' },\r\n        { code: 'PM', name: 'Saint Pierre and Miquelon' },\r\n        { code: 'VC', name: 'Saint Vincent and the Grenadines' },\r\n        { code: 'WS', name: 'Samoa' },\r\n        { code: 'SM', name: 'San Marino' },\r\n        { code: 'ST', name: 'Sao Tome and Principe' },\r\n        { code: 'SA', name: 'Saudi Arabia' },\r\n        { code: 'SN', name: 'Senegal' },\r\n        { code: 'RS', name: 'Serbia' },\r\n        { code: 'SC', name: 'Seychelles' },\r\n        { code: 'SL', name: 'Sierra Leone' },\r\n        { code: 'SG', name: 'Singapore' },\r\n        { code: 'SX', name: 'Sint Maarten (Dutch part)' },\r\n        { code: 'SK', name: 'Slovakia' },\r\n        { code: 'SI', name: 'Slovenia' },\r\n        { code: 'SB', name: 'Solomon Islands' },\r\n        { code: 'SO', name: 'Somalia' },\r\n        { code: 'ZA', name: 'South Africa' },\r\n        { code: 'GS', name: 'South Georgia and the South Sandwich Islands' },\r\n        { code: 'SS', name: 'South Sudan' },\r\n        { code: 'ES', name: 'Spain' },\r\n        { code: 'LK', name: 'Sri Lanka' },\r\n        { code: 'SD', name: 'Sudan' },\r\n        { code: 'SR', name: 'Suriname' },\r\n        { code: 'SJ', name: 'Svalbard and Jan Mayen' },\r\n        { code: 'SE', name: 'Sweden' },\r\n        { code: 'CH', name: 'Switzerland' },\r\n        { code: 'SY', name: 'Syrian Arab Republic' },\r\n        { code: 'TW', name: 'Taiwan, Province of China' },\r\n        { code: 'TJ', name: 'Tajikistan' },\r\n        { code: 'TZ', name: 'Tanzania, United Republic of' },\r\n        { code: 'TH', name: 'Thailand' },\r\n        { code: 'TL', name: 'Timor-Leste' },\r\n        { code: 'TG', name: 'Togo' },\r\n        { code: 'TK', name: 'Tokelau' },\r\n        { code: 'TO', name: 'Tonga' },\r\n        { code: 'TT', name: 'Trinidad and Tobago' },\r\n        { code: 'TN', name: 'Tunisia' },\r\n        { code: 'TR', name: 'Turkey' },\r\n        { code: 'TM', name: 'Turkmenistan' },\r\n        { code: 'TC', name: 'Turks and Caicos Islands' },\r\n        { code: 'TV', name: 'Tuvalu' },\r\n        { code: 'UG', name: 'Uganda' },\r\n        { code: 'UA', name: 'Ukraine' },\r\n        { code: 'AE', name: 'United Arab Emirates' },\r\n        { code: 'GB', name: 'United Kingdom' },\r\n        { code: 'US', name: 'United States' },\r\n        { code: 'UM', name: 'United States Minor Outlying Islands' },\r\n        { code: 'UY', name: 'Uruguay' },\r\n        { code: 'UZ', name: 'Uzbekistan' },\r\n        { code: 'VU', name: 'Vanuatu' },\r\n        { code: 'VE', name: 'Venezuela, Bolivarian Republic of' },\r\n        { code: 'VN', name: 'Viet Nam' },\r\n        { code: 'VG', name: 'Virgin Islands, British' },\r\n        { code: 'VI', name: 'Virgin Islands, U.S.' },\r\n        { code: 'WF', name: 'Wallis and Futuna' },\r\n        { code: 'EH', name: 'Western Sahara' },\r\n        { code: 'YE', name: 'Yemen' },\r\n        { code: 'ZM', name: 'Zambia' },\r\n        { code: 'ZW', name: 'Zimbabwe' },\r\n        // Add more countries as needed\r\n    ];\r\n\r\n    const usStates = [\r\n        { code: 'AL', name: 'Alabama' },\r\n        { code: 'AK', name: 'Alaska' },\r\n        { code: 'AZ', name: 'Arizona' },\r\n        { code: 'AR', name: 'Arkansas' },\r\n        { code: 'CA', name: 'California' },\r\n        { code: 'CO', name: 'Colorado' },\r\n        { code: 'CT', name: 'Connecticut' },\r\n        { code: 'DE', name: 'Delaware' },\r\n        { code: 'FL', name: 'Florida' },\r\n        { code: 'GA', name: 'Georgia' },\r\n        { code: 'HI', name: 'Hawaii' },\r\n        { code: 'ID', name: 'Idaho' },\r\n        { code: 'IL', name: 'Illinois' },\r\n        { code: 'IN', name: 'Indiana' },\r\n        { code: 'IA', name: 'Iowa' },\r\n        { code: 'KS', name: 'Kansas' },\r\n        { code: 'KY', name: 'Kentucky' },\r\n        { code: 'LA', name: 'Louisiana' },\r\n        { code: 'ME', name: 'Maine' },\r\n        { code: 'MD', name: 'Maryland' },\r\n        { code: 'MA', name: 'Massachusetts' },\r\n        { code: 'MI', name: 'Michigan' },\r\n        { code: 'MN', name: 'Minnesota' },\r\n        { code: 'MS', name: 'Mississippi' },\r\n        { code: 'MO', name: 'Missouri' },\r\n        { code: 'MT', name: 'Montana' },\r\n        { code: 'NE', name: 'Nebraska' },\r\n        { code: 'NV', name: 'Nevada' },\r\n        { code: 'NH', name: 'New Hampshire' },\r\n        { code: 'NJ', name: 'New Jersey' },\r\n        { code: 'NM', name: 'New Mexico' },\r\n        { code: 'NY', name: 'New York' },\r\n        { code: 'NC', name: 'North Carolina' },\r\n        { code: 'ND', name: 'North Dakota' },\r\n        { code: 'OH', name: 'Ohio' },\r\n        { code: 'OK', name: 'Oklahoma' },\r\n        { code: 'OR', name: 'Oregon' },\r\n        { code: 'PA', name: 'Pennsylvania' },\r\n        { code: 'RI', name: 'Rhode Island' },\r\n        { code: 'SC', name: 'South Carolina' },\r\n        { code: 'SD', name: 'South Dakota' },\r\n        { code: 'TN', name: 'Tennessee' },\r\n        { code: 'TX', name: 'Texas' },\r\n        { code: 'UT', name: 'Utah' },\r\n        { code: 'VT', name: 'Vermont' },\r\n        { code: 'VA', name: 'Virginia' },\r\n        { code: 'WA', name: 'Washington' },\r\n        { code: 'WV', name: 'West Virginia' },\r\n        { code: 'WI', name: 'Wisconsin' },\r\n        { code: 'WY', name: 'Wyoming' },\r\n    ];\r\n\r\n    const getWeatherData = async () => {\r\n        try {\r\n            // The GeoSpatial API needs only a city and country unless the country is the United States. In that case the url also needs the state code\r\n            const locationApiUrl = country === 'US'\r\n                ? `http://api.openweathermap.org/geo/1.0/direct?q=${city},${stateCode},${country}&limit=1&appid=${apiKey}`\r\n                : `http://api.openweathermap.org/geo/1.0/direct?q=${city},${country}&limit=1&appid=${apiKey}`;\r\n            \r\n            const locationResponse = await fetch(locationApiUrl);\r\n            const locationData = await locationResponse.json();\r\n\r\n            // If the GeoSpatial API cannot find the searched place, an error message appears\r\n            if (!locationData || locationData.length === 0) {\r\n                setErrorMessage('Location not found. Please check the entered place and try again.');\r\n                setWeatherData(null); // Reset weatherData\r\n                setLocationData(null); // Reset locationData\r\n                return;\r\n            }\r\n\r\n            setLocationData(locationData);\r\n\r\n            // Update the Weather API url based off of the found latitude and longitude\r\n            const weatherApiUrl = `https://api.openweathermap.org/data/3.0/onecall?lat=${locationData && locationData.length > 0 ? locationData[0].lat : ''}&lon=${locationData && locationData.length > 0 ? locationData[0].lon : ''}&appid=${apiKey}`;\r\n\r\n            const weatherResponse = await fetch(weatherApiUrl);\r\n            const weatherData = await weatherResponse.json();\r\n\r\n            setWeatherData(weatherData);\r\n            // Resets the error message if a place is found and the weather is retrieved\r\n            setErrorMessage('');\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n\r\n            // Check if the error is due to a specific condition (e.g., place not found)\r\n            if (error.message.includes('undefined')) {\r\n                // Handle the specific error condition\r\n                alert('Location not found. Please ensure your input is correct and try again.');\r\n            } else {\r\n                // For other types of errors, provide a generic error message\r\n                alert('An error occurred while fetching location data. Please try again later.');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCountryChange = (e) => {\r\n        const selectedCountry = e.target.value;\r\n        setCountry(selectedCountry);\r\n\r\n        // If the selected country is the United States, set an empty state code\r\n        if (selectedCountry === 'US') {\r\n            setStateCode('');\r\n        }\r\n    };\r\n\r\n    const handleStateChange = (e) => {\r\n        const selectedStateCode = e.target.value;\r\n        setStateCode(selectedStateCode);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        getWeatherData();\r\n    };\r\n\r\n    // The Weather API gets temperature in kelvin, not a unit most people would use when checking the weather\r\n    const kelvinToCelsius = (kelvin) => kelvin - 273.15;\r\n\r\n    // Formats the date used in the forecast\r\n    const formatDate = (date) => {\r\n        const options = { month: 'long', day: 'numeric' };\r\n        return new Intl.DateTimeFormat('en-US', options).format(date);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Enter city name:\r\n                    <input type=\"text\" value={city} onChange={(e) => setCity(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    Select country:\r\n                    <select value={country} onChange={handleCountryChange}>\r\n                        {countries.map((country) => (\r\n                            <option key={country.code} value={country.code}>\r\n                                {country.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </label>\r\n\r\n                {country === 'US' && (\r\n                    <label>\r\n                        Select state:\r\n                        <select value={stateCode} onChange={handleStateChange}>\r\n                            {usStates.map((state) => (\r\n                                <option key={state.code} value={state.code}>\r\n                                    {state.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </label>\r\n                )}          \r\n\r\n                <button type=\"submit\">Get Weather</button>\r\n            </form>\r\n\r\n            {errorMessage && (\r\n                <div>\r\n                    <p style={{ color: 'red' }}>{errorMessage}</p>\r\n                </div>\r\n            )}\r\n\r\n            {weatherData && weatherData.current && (\r\n                <div>\r\n                    <h2>Current Weather</h2>\r\n                    <p>Temperature: {kelvinToCelsius(weatherData.current.temp).toFixed(2)} °C</p>\r\n                    <p>Feels Like: {kelvinToCelsius(weatherData.current.feels_like).toFixed(2)} °C</p>\r\n                    <p>Humidity: {weatherData.current.humidity ? `${weatherData.current.humidity}%` : 'N/A'}</p>\r\n                    <img\r\n                        src={`http://openweathermap.org/img/w/${weatherData.current.weather[0].icon}.png`}\r\n                        alt={weatherData.current.weather[0].description}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {weatherData && weatherData.daily && (\r\n                <div>\r\n                    {/* Display forecast data here */}\r\n                    <h2>7-Day Forecast</h2>\r\n                    <div className=\"forecast-container\">\r\n                        {weatherData.daily.slice(1).map((day, index) => (\r\n                            <div key={index}  className=\"forecast-day\">\r\n                                <p className=\"date\">{formatDate(new Date(day.dt * 1000))}</p>\r\n                                <p className=\"temperature\">{kelvinToCelsius(day.temp.day).toFixed(2)} °C</p>\r\n                                <img\r\n                                    src={`http://openweathermap.org/img/w/${day.weather[0].icon}.png`}\r\n                                    alt={day.weather[0].description}\r\n                                />\r\n                                {/* ... (other forecast details) */}\r\n                            </div>\r\n                        ))}\r\n                    </div>    \r\n                </div>\r\n            )}\r\n\r\n            {locationData && locationData.length > 0 && (\r\n                <div>\r\n                    {/* Display location data here */}\r\n                    <h2>Location Details</h2>\r\n                    <p>Latitude: {locationData[0].lat}</p>\r\n                    <p>Longitude: {locationData[0].lon}</p>\r\n                    {/* Add more details as needed */}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}